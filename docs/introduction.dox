

/**
\page Page_Introduction Introduction and Overview

Summary: an introduction that explain the context of the project, the problem you address, the possible solutions to solve it, and finally the solution you adopt. Outline the solution.

An embedded system is any controlling system embedded on a device that provides some function or service. The problem is teaching embedded systems is hard. There are a number of implementation details that can be difficult to teach. The system should be capable of the following:

Create a wide variety of devices and scenarios that require different software architectures to accomplish.

Create repeatable stressful scenarios that evaluate the software.

\li Challenges the students
\li Illustrates key concepts and issues
\li Is easy and convenient for the instructor to produce devices and scenarios without having to write one line of code.
\li Is low cost and expandable.

The current implementation is based off the Arduino platform targeting the Atmel AVR Atmega328p processor. The Atmega328p platform was selected because it is an affordable and straight forward hardware platform to build from. If the students want to try to apply their work to a real embedded system it should be as simple as recompiling and uploading the code onto the Arduino. The Arduino is software platform that can be built on top of various Atmel AVR processors. The software is written in the C++ programming language. This software API abstracts away many of the implementation details of the processor of the Atmega328p. Thus, by implementing my own version of the Arduino API targeting a specially designed emulator you could run the same code you’d write for the embedded system on your computer as you would in the emulator.

The emulator has four major components. The Arduino API, the  Atmega328p Hardware Abstractions, Event Scheduler and a python interface for controlling the system.
**/