/** \file
 *
 *  This file contains special DoxyGen information for the generation of the main page and other special
 *  documentation pages. It is not a project source file.
**/

/**
\page Page_ArduinoAPI Arduino API and Control Interface

\section ArduinoAPI Arduino API

The Arduino is software platform that can be built on top of various Atmel AVR
processors. The current implementation is based off the Arduino platform
targeting the Atmel AVR Atmega328p processor. The Atmega328p platform was
selected because it is an affordable and commonly used in various Arduino 
devices. If the students want to try to apply their work to a real embedded
system it should be as simple as recompiling and uploading the code onto the
Arduino. The firmware for an Arduino is written in the C/C++ programming
language. This software API abstracts away many of the implementation details
of the hardware. The main strategy of the emulator is not to emulate the
individual hardware components directly, but to implement the Arduino API.

\section HardwareAbstraction Atmel AVR Atmega328p Hardware Abstractions

The Arduino API abstracts a number of hardware details from the end user.
For instance, interrupts have been greatly simplified as well as other simple
operations like reading from an UART.
However, the Arduino API does not mask all hardware details from the developer.
These hardware details can help teach students about embedded system
constraints. The primary hardware abstractions the emulator still implements
are the PORTx and DDRx registers. In the Atmega328p, the PORTx data registers
hold the value of memory mapped IO pins, for doing digital reads and writes.
The DDRx registers are used to control the direction of the pin, whether the
pin is an input pin or an output pin.

\section PythonControlAPI Python Control API Configuration

The python control API interfaces between the python runtime and the C runtime
interface to the Ardulator. The interfaces expose mechanisms for adding signals
to the runtime scenario as well as starting and stopping the scenario. The
python

**/
