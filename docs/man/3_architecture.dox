/** \file
 *
 *  This file contains special DoxyGen information for the generation of the
 *  main page and other special documentation pages. It is not a project source
 *  file.
**/

/**
\page Page_Architecture Architecture

\section Overall Architecture Overview

There are three main components of the emulator: the Arduino API Code, the
Emulator Runtime and the python controller code. The Arduino Code is designed
to represent code that could be running on an embedded processor, for example
the Atmega328p.

\section Emulator Emulator

The emulator relates control from the Arduino Code to the state of the various
signals connected to the emulator. The Arduino Code must connect the signals
to various pins by implementing the \link pinConfiguration \endlink function.
Once the emulator starts the scenario the \link setup \endlink function
is called one time, multiple calls to the \link
ardulator::Ardulator::runScenario \endlink function will not re-initialize the
scenario. The \link setup \endlink function should configure the any pins and
map any signals needed by the runtime. Afterwards, the emulator will make
repeated calls to the \link loop \endlink operation until the internal clock
has passed the stopping point for the runtime.

\image html emulator_io.png "Emulator IO"
\image latex emulator_io.eps "Emulator IO" width=7cm

The emulator is arranged to be controlled from a configuration file or script.
Controller scripts configure the scenario runtime signals and returns output
from the runtime. Output from the emulator runtime is recorded and reported
back to the students after each run of the system.

\section SignalDescription Description of Signals

A signal represents various values that a pin could hold. Currently, there are
three types of signals: Analog, Digital and Serial. Signals can also register
a callback to implement a more dynamic value.

\section DataFlow Data Flow

This following message sequence chart shows the basic flow of control of the
emulator system. The emulator is controlled and configured with python links to
a C API. The python code registers various signals as well as controls the 
runtime length of the emulation.

\msc
  # hscale = "2";

  a [label="Python Code"], b [label="Ardulator Instance"], c [label="Ardulator Runtime"];

  a->b [ label="Scenario Configuration", URL="\ref PyArdulator.run" ];
  b->c [ label="Prepare and Run Scenario", URL="\ref ardulator::Ardulator::runScenario()" ];
  c=>c [ label="setup()", URL="\ref setup()" ];
  c=>c [ label="loop()", URL="\ref loop()" ];
  ...;
  c=>>a [ label="Signal Callbacks" ];
  a>>c [ label="Signal Update" ];
  c=>c [ label="loop()", URL="\ref loop()" ];
  ...;
  c>>a [ label="Scenario Results" ];
\endmsc

**/
